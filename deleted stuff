// panel9 (General View) 

//     <div
//       class="resizable"
//       id="panel9"
//       ondrag="panelDrag(this)"
//       onclick="panelDrag(this)"
//     >
//       <p id="panel9title" class="panelTitle">Graph View</p>
//       <div id="tabs">
//         <ul>
//           <li><a href="#tabs-1">t-SNE</a></li>
//           <li><a href="#tabs-2">Force Layout</a></li>
//         </ul>
//         <div id="tabs-1" class="context-menu-four box menu-1">
//           <!-- tab1 -->
//           <span id="TsneSilhouette_label"></span>
//           <div id="general_view1">
//             <!-- Documents graph goes here (T-SNE layout) -->
//           </div>
//           <div id="tabs-1_controls">
//             <span id="slider4_label">Perplexity [5-50]:</span>
//             <input id="slider4_Textbox" type="text" onkeyup="changeSlider4()" />
//             <span id="slider4_min">5</span>
//             <span id="slider4_max">50</span>
//             <div id="slider4"></div>
//             <input
//               id="button41"
//               title="apply"
//               class="button"
//               type="button"
//               value="apply"
//               onclick="changePerplexity()"
//             />
//           </div>
//         </div>
//         <div id="tabs-2" class="context-menu-four box menu-1">
//           <!-- tab2 -->
//           <input
//             id="button19"
//             title="Silhouette"
//             class="button"
//             type="button"
//             value="Silhouette"
//             onclick="forceSilhouette()"
//           />
//           <span id="forceSilhouette_label"></span>
//           <div id="general_view2">
//             <!-- Documents graph goes here (Force layout) -->
//           </div>
//           <span id="slider3_label">Gravity (%):</span>
//           <input id="slider3_Textbox" type="text" onkeyup="changeSlider3()" />
//           <span id="slider3_min">0</span>
//           <span id="slider3_max">100</span>
//           <div id="slider3"></div>

//           <span id="slider2_label">Link Distance [0-100]:</span>
//           <input id="slider2_Textbox" type="text" onkeyup="changeSlider2()" />
//           <span id="slider2_min">0</span>
//           <span id="slider2_max">100</span>
//           <div id="slider2"></div>
//         </div>
//       </div>

//       <div id="panel9_filters">
//         <span id="filter1_label">First Filter:</span>
//         <select id="filter1_select">
//           <!-- list of filter1 are here! -->
//           <option value=""></option>
//         </select>
//         <script>
//           document.getElementById("filter1_select").onchange = function () {
//             applyFilter();
//           };
//         </script>
//         <span id="filter2_label">Second Filter:</span>
//         <select id="filter2_select">
//           <!-- list of filter2 are here! -->
//           <option value=""></option>
//         </select>
//         <script>
//           document.getElementById("filter2_select").onchange = function () {
//             applyFilter();
//           };
//         </script>
//       </div>

//       <div id="tabs-common-control">
//         <span id="slider1_label">Cosine Distance (%):</span>
//         <input id="slider1_Textbox" type="text" onkeyup="changeSlider1()" />
//         <span id="slider1_min">0</span>
//         <span id="slider1_max">97</span>
//         <div id="slider1"></div>

//         <span id="span1">#Documents: </span><span id="span2"></span>
//         <span id="span3">#Links: </span><span id="span4"></span>
//         <input
//           id="button17"
//           title="Graph VNA"
//           class="button"
//           type="button"
//           value="Graph VNA"
//           onclick="exportGraphToVNAformat($('#slider1_Textbox').val()/100)"
//         />
//         <input
//           id="button11"
//           title="MindMap"
//           class="button"
//           type="button"
//           value="MindMap"
//           onclick="MindMapClicked()"
//         />
//       </div>
//     </div>

// panel6 (Document-Cluster View)
//     <div
//       class="resizable"
//       id="panel6"
//       ondrag="panelDrag(this)"
//       onclick="panelDrag(this)"
//     >
//       <p id="panel6title" class="panelTitle">Document-Cluster View</p>
//       <div id="DocumentClusterView">
//         <!-- the svg of paralelCordinator goes here -->
//       </div>
//     </div>

/**
 * Add new term to the cluster (if a term in key term list double clicked)
 */
// $(document).ready(function () {
//   saveLog("AddTermDoubleClickList");
//   $("#selectable").dblclick(function () {
//     var term = $(this.getElementsByClassName("ui-selected")).text();

//     var terms = document
//       .getElementById(getSelectedClusterID())
//       .getElementsByClassName("sortable");

//     if (!termExists($(terms).children(), term)) {
//       //check if the term exists or not
//       appendTerm(term);
//     } else {
//       alert('This cluster already have "' + term + '"');
//     }
//   });
// });

// /**
//  * Add new term to the cluster (if a word in a documnet content double clicked)
//  */
// $(document).ready(function () {
//   saveLog("AddTermDoubleClickDocContent");
//   //if a word in a documnet content double clicked
//   $("#doc_content").dblclick(function () {
//     var term = getSelectedText();

//     var terms = document
//       .getElementById(getSelectedClusterID())
//       .getElementsByClassName("sortable");

//     if (!termExists($(terms).children(), term)) {
//       appendTerm(term);
//     } else {
//       alert('This cluster already have "' + term + '"');
//     }
//   });
// });

/**
 * append the selected term to the cluster
 * @param term = the term
 */
// function appendTerm(term) {
//   var x;
//   x = document.getElementsByClassName("cluster");
//   var i;
//   for (i = 0; i < x.length; i++) {
//     if (x[i].style.borderColor == "rgb(254, 46, 154)") {
//       $(x[i].getElementsByClassName("sortable")).append(
//         "<li class='ui-state-default ui-sortable-handle' onmousedown=\"wordMouseDown(event)\"><span class='terms'>" +
//           term +
//           "</span></li>"
//       );
//     }
//   }
// }





// * Highlight the document in general view graph
//  * @param docName = docuemnt name
//  */
// function highlightDocGeneralView(docName) {
//   node.style("stroke", function (o) {
//     if (o.na == docName) {

//       return "red";
//     }
//     // else if(docsHighlight[o.na])
//     // {
//     //   return "blue";
//     // }
//     else {
//       return "#a6a6a6";
//     }
//   });

//   node.style("stroke-width", function (o) {
//     if (o.na == docName) {
//       return "2px";
//     }
//     // else if(docsHighlight[o.na])
//     // {
//     //   return "2px";
//     // }
//     else {
//       return "0.5px";
//     }
//   });

//   node2.style("stroke", function (o) {
//     if (o.na == docName) {
//       return "red";
//     }
//     // else if(docsHighlight[o.na])
//     // {
//     //   return "blue";
//     // }
//     else {
//       return "#a6a6a6";
//     }
//   });

//   node2.style("stroke-width", function (o) {
//     if (o.na == docName) {
//       return "2px";
//     }
//     // else if(docsHighlight[o.na])
//     // {
//     //   return "2px";
//     // }
//     else {
//       return "0.5px";
//     }
//   });
// }


// function transformData_relative_Values_1(data) {
//   var transformed = [];
//   var clusters = Object.keys(data);

//   // Assuming each array in data has the same length
//   var numClusters = data[clusters[0]].length;

//   for (var i = 0; i < numClusters; i++) {
//     var clusterData = { cluster: "Cluster " + (i + 1) };
//     clusters.forEach(function (key) {
//       clusterData[key] = data[key][i];
//     });
//     transformed.push(clusterData);
//   }
//   return transformed;
// }
// function createTermClusterChart_relative_Values_1() {
// // Assuming the container div 'panel9' has been rendered and has width and height
// var panel9 = document.getElementById("panel9");
// console.log(document.getElementById("panel9"));
// console.log(panel9);
// var computedStyle = window.getComputedStyle(panel9);

// // Get the computed width and height from the CSS properties
// var panelWidth = parseFloat(computedStyle.width);
// var panelHeight = parseFloat(computedStyle.height);

// // Define margins as an object, you can adjust these values as needed
// var margin = { top: 20, right: 20, bottom: 40, left: 40 };

// // Calculate the actual width and height of the SVG canvas
// var width = panelWidth - margin.left - margin.right;
// var height = panelHeight - margin.top - margin.bottom;
// doc = document.getElementById("doc_content").innerHTML.replace(/\n$/, "");
// console.log(doc);
// documentExplanation = explanation_details[doc];
// var rawScores = documentExplanation;

// var scalingFactor = 1; // Adjust the scaling factor as needed

// // Execute the new steps
// var featureAverages = calculateFeatureAverages(rawScores);
// var relativeDifferences = computeRelativeDifferences(rawScores, featureAverages);
// var scaledDifferences = scaleUpDifferences(relativeDifferences, scalingFactor);
// var { positiveValues, negativeValues } = separatePositiveNegativeValues(scaledDifferences);

// // Transform the data for D3.js
// var transformedData = transformData_relative_Values_1(positiveValues);
// var negativeTransformedData = transformData_relative_Values_1(negativeValues);
// // var documentExplanation = {
// //   "Michael Fincke": [0.269, 0.268, 0.304, 0.290], feature: cluster 1, cluster 2, cluster 3, cluster 4
// //   "Astronaut": [0.217, 0.272, 0.278, 0.313],feature: cluster 1, cluster 2, cluster 3, cluster 4
// //   "Orbit": [0.241, 0.272, 0.280, 0.305],feature: cluster 1, cluster 2, cluster 3, cluster 4
// //   "Earth": [0.262, 0.304, 0.300, 0.304]feature: cluster 1, cluster 2, cluster 3, cluster 4
// // };

// // var data = transformData(documentExplanation);

// // Define the container and SVG dimensions
// var margin = { top: 20, right: 160, bottom: 50, left: 30 };
// var width = 960 - margin.left - margin.right,
//     height = 500 - margin.top - margin.bottom;

// // Create the SVG container
// var svg = d3.select("#chart")
//             .append("svg")
//             .attr("width", width + margin.left + margin.right)
//             .attr("height", height + margin.top + margin.bottom)
//             .append("g")
//             .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

// // Set up the scales
// var xScale = d3.scale.ordinal()
//                .rangeRoundBands([0, width], .1)
//                .domain(transformedData.map(function(d) { return d.cluster; }));

// var yScale = d3.scale.linear()
//                .range([height, 0])
//                .domain([
//                  d3.min(negativeTransformedData, function(d) {
//                    return d3.sum(d3.values(d).filter(function(v) { return v < 0; }));
//                  }),
//                  d3.max(transformedData, function(d) {
//                    return d3.sum(d3.values(d).filter(function(v) { return v > 0; }));
//                  })
//                ]);
// var color = d3.scale.ordinal()
//               .range(["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728"])
//               .domain(Object.keys(transformedData[0]).filter(function(key) { return key !== "cluster"; }));
              
// // Set up the axes
// var xAxis = d3.svg.axis().scale(xScale).orient("bottom");
// var yAxis = d3.svg.axis().scale(yScale).orient("left");

// // Draw the axes
// svg.append("g")
//    .attr("class", "x axis")
//    .attr("transform", "translate(0," + height + ")")
//    .call(xAxis);

// svg.append("g")
//    .attr("class", "y axis")
//    .call(yAxis)
//    .append("text")
//    .attr("transform", "rotate(-90)")
//    .attr("y", 6)
//    .attr("dy", ".71em")
//    .style("text-anchor", "end")
//    .text("Score");

// // Function to handle the stacking of bars
// function stackBars(transformedData, className, yScale) {
//   var cluster = svg.selectAll("." + className)
//                    .data(transformedData)
//                    .enter().append("g")
//                    .attr("class", "g")
//                    .attr("transform", function(d) { return "translate(" + xScale(d.cluster) + ",0)"; });

//   cluster.selectAll("rect")
//          .data(function(d) {
//            return Object.keys(d).filter(function(key) { return key !== "cluster"; }).map(function(key) {
//              return { key: key, value: d[key] };
//            });
//          })
//          .enter().append("rect")
//          .attr("width", xScale.rangeBand())
//          .attr("y", function(d) {
//           return d.value < 0 ? yScale(0) : yScale(d.value);
//         })
//         .attr("height", function(d) {
//           return Math.abs(yScale(d.value) - yScale(0));
//         })
//          .style("fill", function(d) {
//            return color(d.key);
//          });
//          cluster.selectAll(".text")
//          .data(function(d) {
//            return Object.keys(d).filter(function(key) { return key !== "cluster"; }).map(function(key) {
//              return { key: key, value: d[key] };
//            });
//          })
//          .enter().append("text")
//          .attr("class", "bar-text")
//          .attr("x", xScale.rangeBand() / 2) // Centers the text in the bar
//          .attr("y", function(d) {
//            return d.value < 0 ? yScale(0) - 5 : yScale(d.value) + 15; // Positions the text above or below the zero line based on the value
//          })
//          .text(function(d) {
//            return d.value.toFixed(2); // Formats the number to two decimal places
//          })
//          .attr("text-anchor", "middle") // Centers the text horizontally
//          .attr("fill", "black"); // Sets the text color
// }


//   // Add text labels
  
//   // Draw positive and negative bars
//   stackBars(transformedData, "positive", yScale);
//   stackBars(negativeTransformedData, "negative", yScale);

// // Calculate the legend item offsets by accumulating widths
// var legendItemOffsets = [0];
// color
//   .domain()
//   .slice()
//   .reverse()
//   .forEach(function (d, i) {
//     var textWidth = getTextWidth(d, "20px sans-serif"); // Calculate text width (you may need a helper function for this)
//     var spacing = 48; // Adjust spacing based on your styling
//     if (i > 0) {
//       legendItemOffsets.push(legendItemOffsets[i - 1] + textWidth + spacing);
//     }
//   });

// // Create legend
// var legend = svg
//   .selectAll(".legend")
//   .data(color.domain().slice().reverse())
//   .enter()
//   .append("g")
//   .attr("class", "legend")
//   .attr("transform", function (d, i) {
//     return (
//       "translate(" +
//       legendItemOffsets[i] +
//       "," +
//       (height + margin.bottom - 20) +
//       ")"
//     );
//   });

// legend
//   .append("rect")
//   .attr("x", 0)
//   .attr("width", 18)
//   .attr("height", 18)
//   .style("fill", color);

// legend
//   .append("text")
//   .attr("x", 22)
//   .attr("y", 9)
//   .attr("dy", ".35em")
//   .style("text-anchor", "start")
//   .text(function (d) {
//     return d;
//   });

// // Helper function to measure text width
// function getTextWidth(text, font) {
//   // re-use canvas object for better performance
//   var canvas =
//     getTextWidth.canvas ||
//     (getTextWidth.canvas = document.createElement("canvas"));
//   var context = canvas.getContext("2d");
//   context.font = font;
//   var metrics = context.measureText(text);
//   return metrics.width;
// }
// }

/*
 * Get general view graph
 * @param similarityThreshold = the similarity threshold
 * @return generalViewGraph = the general view graph
 */
// function getGeneralViewGraph(similarityThreshold) {
//   var scale_width = $("#general_view1").width() / 11;
//   var scale_height = $("#general_view1").height() / 11;

//   var date1 = new Date();
//   var n1 = date1.getTime();

//   var tsneSilhouetteState = false;
//   //run t-sne
//   if (tsneResult.length < 1) {
//     tsneSilhouetteState = true;
//     var opt = {};
//     opt.epsilon = 10;
//     opt.perplexity = 5;
//     opt.dim = 2;

//     // var opt = { epsilon: 10 }; // epsilon is learning rate (10 = default)
//     var tsne = new tsnejs.tSNE(opt); // create a tSNE instance
//     tsne.initDataDist(documentDocumentSimilarity);

//     for (var k = 0; k < 300; k++) {
//       tsne.step(); // every time you call this, solution gets better
//     }

//     tsneResult = tsne.getSolution(); // Y is an array of 2-D points that you can plot
//   }

//   var tsneLables = new Array();

//   var tempGeneralViewGraph = "{";

//   //add nodes
//   var documentNewIndex = [];
//   var index = 0;
//   tempGeneralViewGraph += '"nodes":[';
//   for (var i = 0; i < documentDocumentSimilarity.length; i++) {
//     if (removedDocuments[i] == false) {
//       documentNewIndex[i] = index;

//       var documentClustersName = getDocumentClustersName(documentsName[i]);
//       tempGeneralViewGraph +=
//         '{"x": ' +
//         (tsneResult[i][0] + scale_width) * 6 +
//         ', "y": ' +
//         (tsneResult[i][1] + scale_height) * 6 +
//         ', "fixed":false' +
//         ', "na":"' +
//         documentsName[i] +
//         '", "cl":"' +
//         documentClustersName +
//         '", "co":"';

//       tsneLables[index] = documentClustersName.split(",")[0];
//       index++;

//       if (documentClustersName.split(",").length > 1) {
//         tempGeneralViewGraph += 'black"},';
//       } else {
//         tempGeneralViewGraph += getClusterColor(documentClustersName) + '"},';
//       }
//     }
//   }

//   //get tsne avg silhouette
//   if (tsneSilhouetteState) {
//     getTsneSilhouette(tsneResult, tsneLables);
//   }

//   //remove the last comma
//   tempGeneralViewGraph = tempGeneralViewGraph.substring(
//     0,
//     tempGeneralViewGraph.length - 1
//   );

//   tempGeneralViewGraph += "],";

//   //add links
//   var count = 0;
//   tempGeneralViewGraph += '"links":[';
//   for (var i = 0; i < documentDocumentSimilarity.length; i++) {
//     if (removedDocuments[i] == false) {
//       for (var j = 0; j < documentDocumentSimilarity.length; j++) {
//         if (removedDocuments[j] == false) {
//           if (i != j) {
//             // no self loop (cycle)
//             if (
//               parseFloat(documentDocumentSimilarity[i][j]) <=
//               similarityThreshold
//             ) {
//               tempGeneralViewGraph +=
//                 '{"source":' +
//                 documentNewIndex[i] +
//                 ',"target":' +
//                 documentNewIndex[j] +
//                 ',"v":' +
//                 documentDocumentSimilarity[i][j] +
//                 "},";
//               count++;
//             }
//           }
//         }
//       }
//     }
//   }

//   //remove the last comma
//   tempGeneralViewGraph = tempGeneralViewGraph.substring(
//     0,
//     tempGeneralViewGraph.length - 1
//   );

//   tempGeneralViewGraph += "]}";

//   generalViewGraph2 = JSON.parse(tempGeneralViewGraph);

//   return JSON.parse(tempGeneralViewGraph);
// }

/*
 * Get  Silhouette
 * @param tsneResult =  x and y dimensions
 * @param tsneLables = labels of documents
 */
// function getTsneSilhouette(tsneResult, tsneLables) {
//   $.ajax({
//     type: "POST",
//     url: "./cgi-bin/tsneSilhouette.py",
//     data: {
//       tsneResult: JSON.stringify(tsneResult),
//       tsneLables: JSON.stringify(tsneLables),
//     },
//     success: function (msg) {
//       var status = msg["status"];
//       // console.trace("label");
//       if (status == "yes") {
//         TsneSilhouette = eval(msg["TsneSilhouette"]);
//         TsneSilhouette = TsneSilhouette.toFixed(4);

//         //show the tsne Silhouette
//         $("#TsneSilhouette_label").html("T-SNE Silhouette: " + TsneSilhouette);
//       }
//       if (status == "no") {
//         alert("Error1 in getting Tsne Silhouette!");
//       }
//       if (status == "error") {
//         alert("Error2 in getting Tsne Silhouette!");
//       }
//     },
//     error: function (msg) {
//       alert("Error3 in getting Tsne Silhouette!");
//     },
//   });
// }

/*
 * Get general view graph
 * @param similarityThreshold = the similarity threshold
 * @return graph in VNA format
 */
// function exportGraphToVNAformat(similarityThreshold) {
//   saveLog("exportGraphToVNAformat");

//   if (userID == "") {
//     return null;
//   }

//   //get VNA
//   var vna = getVNA(similarityThreshold);

//   //save VNA to file
//   $.ajax({
//     type: "POST",
//     url: "./cgi-bin/VNASave.py",
//     data: {
//       vna: JSON.stringify(vna),
//       userDirectory: JSON.stringify(userDirectory),
//     },
//     success: function (msg) {
//       var status = msg["status"];

//       if (status == "yes") {
//         //open the link of VNA in new Tab
//         window.open("./" + userID + "/vna", "_blank");
//       }
//       if (status == "no") {
//         alert("Error1 in getting graph VNA!");
//       }
//     },
//     error: function (msg) {
//       alert("Error2 in getting graph VNA!");
//     },
//   });
// }

/*
 * Get general view graph
 * @param similarityThreshold = the similarity threshold
 * @return graph in VNA format
 */
// function getVNA(similarityThreshold) {
//   saveLog("getVNA");

//   var VNA_Format = "*Node data\n";
//   VNA_Format += "id name clusters color\n";

//   //add nodes
//   var documentNewIndex = [];
//   var index = 0;
//   for (var i = 0; i < documentDocumentSimilarity.length; i++) {
//     if (removedDocuments[i] == false) {
//       documentNewIndex[i] = index;

//       var documentClustersName = getDocumentClustersName(documentsName[i]);
//       VNA_Format +=
//         index +
//         " " +
//         '"' +
//         documentsName[i] +
//         '" "' +
//         documentClustersName +
//         '" "';

//       index++;

//       if (documentClustersName.split(",").length > 1) {
//         VNA_Format += 'black"\n';
//       } else {
//         VNA_Format += getClusterColor(documentClustersName) + '"\n';
//       }
//     }
//   }

//   //add links
//   VNA_Format += "*Tie data\n";
//   VNA_Format += "from to distance\n";

//   for (var i = 0; i < documentDocumentSimilarity.length; i++) {
//     if (removedDocuments[i] == false) {
//       for (var j = 0; j < documentDocumentSimilarity.length; j++) {
//         if (removedDocuments[j] == false) {
//           if (i != j) {
//             // no self loop (cycle)
//             if (
//               parseFloat(documentDocumentSimilarity[i][j]) <=
//               similarityThreshold
//             ) {
//               VNA_Format +=
//                 documentNewIndex[i] +
//                 " " +
//                 documentNewIndex[j] +
//                 " " +
//                 documentDocumentSimilarity[i][j] +
//                 "\n";
//             }
//           }
//         }
//       }
//     }
//   }

//   return VNA_Format;
// }

// function transformData_differential_value(data) {
//   var meanScores = calculateMeanScores(data);
//   var differentialScores = calculateDifferentialScores(data, meanScores);
//   var data = normalizeScores(differentialScores);
  
//   var transformed = [];
//   var clusters = Object.keys(data);

//   // Assuming each array in data has the same length
//   var numClusters = data[clusters[0]].length;

//   for (var i = 0; i < numClusters; i++) {
//     var clusterData = { cluster: "Cluster " + (i + 1) };
//     clusters.forEach(function (key) {
//       clusterData[key] = data[key][i];
//     });
//     transformed.push(clusterData);
//   }
//   return transformed;
// }
// function createTermClusterChart_differential_values() {
//   // Assuming the container div 'panel9' has been rendered and has width and height
//   var panel9 = document.getElementById("panel9");
//   console.log(document.getElementById("panel9"));
//   console.log(panel9);
//   var computedStyle = window.getComputedStyle(panel9);

//   // Get the computed width and height from the CSS properties
//   var panelWidth = parseFloat(computedStyle.width);
//   var panelHeight = parseFloat(computedStyle.height);

//   // Define margins as an object, you can adjust these values as needed
//   var margin = { top: 20, right: 20, bottom: 40, left: 40 };

//   // Calculate the actual width and height of the SVG canvas
//   var width = panelWidth - margin.left - margin.right;
//   var height = panelHeight - margin.top - margin.bottom;
//   doc = document.getElementById("doc_content").innerHTML.replace(/\n$/, "");
//   documentExplanation = explanation_details[doc];
//   // var documentExplanation = {
//   //   "Michael Fincke": [0.269, 0.268, 0.304, 0.290], feature: cluster 1, cluster 2, cluster 3, cluster 4
//   //   "Astronaut": [0.217, 0.272, 0.278, 0.313],feature: cluster 1, cluster 2, cluster 3, cluster 4
//   //   "Orbit": [0.241, 0.272, 0.280, 0.305],feature: cluster 1, cluster 2, cluster 3, cluster 4
//   //   "Earth": [0.262, 0.304, 0.300, 0.304]feature: cluster 1, cluster 2, cluster 3, cluster 4
//   // };

//   var data = transformData_differential_value(documentExplanation);

//   var margin = { top: 20, right: 160, bottom: 50, left: 30 };

//   var width = 960 - margin.left - margin.right,
//     height = 500 - margin.top - margin.bottom;

//   var svg = d3.select("#chart").select("svg");

//   // If SVG is already present, remove it before creating a new one
//   if (!svg.empty()) {
//     svg.remove();
//   }
//   var svg = d3
//     .select("#chart")
//     .append("svg")
//     .attr("width", width + margin.left + margin.right)
//     .attr("height", height + margin.top + margin.bottom)
//     .append("g")
//     .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

//   var x = d3.scale
//     .ordinal()
//     .rangeRoundBands([0, width / 1.5], 0.3)
//     .domain(
//       data.map(function (d) {
//         return d.cluster;
//       })
//     );

//   var color = d3.scale
//     .ordinal()
//     // .range(["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728"])
//     .range(["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5"])
//     .domain(
//       d3.keys(data[0]).filter(function (key) {
//         return key !== "cluster";
//       })
//     );
//   var y = d3.scale
//     .linear()
//     .rangeRound([height, 0])
//     .domain([
//       0,
//       d3.max(data, function (d) {
//         return d3.sum(
//           color.domain().map(function (key) {
//             return d[key];
//           })
//         );
//       }),
//     ]);

//   var xAxis = d3.svg.axis().scale(x).orient("bottom");

//   var yAxis = d3.svg.axis().scale(y).orient("left");

//   // Define the colors for each concept

//   svg
//     .append("g")
//     .attr("class", "x axis")
//     .attr("transform", "translate(0," + height + ")")
//     .call(xAxis);

//   svg
//     .append("g")
//     .attr("class", "y axis")
//     .call(yAxis)
//     .append("text")
//     .attr("transform", "rotate(-90)")
//     .attr("y", 6)
//     .attr("dy", ".71em")
//     .style("text-anchor", "end")
//     .text("Score");

//   var cluster = svg
//     .selectAll(".cluster")
//     .data(data)
//     .enter()
//     .append("g")
//     .attr("class", "g")
//     .attr("transform", function (d) {
//       return "translate(" + x(d.cluster) + ",0)";
//     });

//   cluster
//     .selectAll("rect")
//     .data(function (d) {
//       var y0 = 0;
//       return color.domain().map(function (name) {
//         return { name: name, y0: y0, y1: (y0 += +d[name]), cluster: d.cluster };
//       });
//     })
//     .enter()
//     .append("rect")
//     .attr("width", x.rangeBand())
//     .attr("y", function (d) {
//       return y(d.y1);
//     })
//     .attr("height", function (d) {
//       return y(d.y0) - y(d.y1);
//     })
//     .style("fill", function (d) {
//       return color(d.name);
//     })
//     // Add text labels
//     .each(function (d) {
//       var bar = d3.select(this);
//       var barHeight = y(d.y0) - y(d.y1);
//       if (barHeight > 20) {
//         // Only add text if the bar is tall enough
//         var barWidth = x.rangeBand();
//         var barX = x(d.cluster) + barWidth / 2; // Center of the bar
//         var barY = y(d.y1) + (y(d.y0) - y(d.y1)) / 2; // Middle of the bar height

//         svg
//           .append("text")
//           .attr("x", barX)
//           .attr("y", barY)
//           .attr("dy", "0.35em")
//           .attr("text-anchor", "middle")
//           .text(d3.format(".2f")(d.y1 - d.y0))
//           .style("fill", "black") // Choose a fill color that contrasts with the bar
//           .style("font-size", "20px"); // Adjust font size as needed
//       }
//     });

//   // Calculate the legend item offsets by accumulating widths
//   var legendItemOffsets = [0];
//   color
//     .domain()
//     .slice()
//     .reverse()
//     .forEach(function (d, i) {
//       var textWidth = getTextWidth(d, "20px sans-serif"); // Calculate text width (you may need a helper function for this)
//       var spacing = 48; // Adjust spacing based on your styling
//       if (i > 0) {
//         legendItemOffsets.push(legendItemOffsets[i - 1] + textWidth + spacing);
//       }
//     });

//   // Create legend
//   var legend = svg
//     .selectAll(".legend")
//     .data(color.domain().slice().reverse())
//     .enter()
//     .append("g")
//     .attr("class", "legend")
//     .attr("transform", function (d, i) {
//       return (
//         "translate(" +
//         legendItemOffsets[i] +
//         "," +
//         (height + margin.bottom - 20) +
//         ")"
//       );
//     });

//   legend
//     .append("rect")
//     .attr("x", 0)
//     .attr("width", 18)
//     .attr("height", 18)
//     .style("fill", color);

//   legend
//     .append("text")
//     .attr("x", 22)
//     .attr("y", 9)
//     .attr("dy", ".35em")
//     .style("text-anchor", "start")
//     .text(function (d) {
//       return d;
//     });

//   // Helper function to measure text width
//   function getTextWidth(text, font) {
//     // re-use canvas object for better performance
//     var canvas =
//       getTextWidth.canvas ||
//       (getTextWidth.canvas = document.createElement("canvas"));
//     var context = canvas.getContext("2d");
//     context.font = font;
//     var metrics = context.measureText(text);
//     return metrics.width;
//   }
// }

// function transformData(data) {
//   var transformed = [];
//   var clusters = Object.keys(data);

//   // Assuming each array in data has the same length
//   var numClusters = data[clusters[0]].length;

//   for (var i = 0; i < numClusters; i++) {
//     var clusterData = { cluster: "Cluster " + (i + 1) };
//     clusters.forEach(function (key) {
//       clusterData[key] = data[key][i];
//     });
//     transformed.push(clusterData);
//   }
//   return transformed;
// }
// function createTermClusterChartOriginal() {
//   // Assuming the container div 'panel9' has been rendered and has width and height
//   var panel9 = document.getElementById("panel9");
//   console.log(document.getElementById("panel9"));
//   console.log(panel9);
//   var computedStyle = window.getComputedStyle(panel9);

//   // Get the computed width and height from the CSS properties
//   var panelWidth = parseFloat(computedStyle.width);
//   var panelHeight = parseFloat(computedStyle.height);

//   // Define margins as an object, you can adjust these values as needed
//   var margin = { top: 20, right: 20, bottom: 40, left: 40 };

//   // Calculate the actual width and height of the SVG canvas
//   var width = panelWidth - margin.left - margin.right;
//   var height = panelHeight - margin.top - margin.bottom;
//   doc = document.getElementById("doc_content").innerHTML.replace(/\n$/, "");
//   documentExplanation = explanation_details[doc];
//   // var documentExplanation = {
//   //   "Michael Fincke": [0.269, 0.268, 0.304, 0.290], feature: cluster 1, cluster 2, cluster 3, cluster 4
//   //   "Astronaut": [0.217, 0.272, 0.278, 0.313],feature: cluster 1, cluster 2, cluster 3, cluster 4
//   //   "Orbit": [0.241, 0.272, 0.280, 0.305],feature: cluster 1, cluster 2, cluster 3, cluster 4
//   //   "Earth": [0.262, 0.304, 0.300, 0.304]feature: cluster 1, cluster 2, cluster 3, cluster 4
//   // };

//   var data = transformData(documentExplanation);

//   var margin = { top: 20, right: 160, bottom: 50, left: 30 };

//   var width = 960 - margin.left - margin.right,
//     height = 500 - margin.top - margin.bottom;

//   var svg = d3.select("#chart").select("svg");

//   // If SVG is already present, remove it before creating a new one
//   if (!svg.empty()) {
//     svg.remove();
//   }
//   var svg = d3
//     .select("#chart")
//     .append("svg")
//     .attr("width", width + margin.left + margin.right)
//     .attr("height", height + margin.top + margin.bottom)
//     .append("g")
//     .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

//   var x = d3.scale
//     .ordinal()
//     .rangeRoundBands([0, width / 1.5], 0.3)
//     .domain(
//       data.map(function (d) {
//         return d.cluster;
//       })
//     );

//   var color = d3.scale
//     .ordinal()
//     .range(["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5"])
//     .domain(
//       d3.keys(data[0]).filter(function (key) {
//         return key !== "cluster";
//       })
//     );
//   var y = d3.scale
//     .linear()
//     .rangeRound([height, 0])
//     .domain([
//       0,
//       d3.max(data, function (d) {
//         return d3.sum(
//           color.domain().map(function (key) {
//             return d[key];
//           })
//         );
//       }),
//     ]);

//   var xAxis = d3.svg.axis().scale(x).orient("bottom");

//   var yAxis = d3.svg.axis().scale(y).orient("left");

//   // Define the colors for each concept

//   svg
//     .append("g")
//     .attr("class", "x axis")
//     .attr("transform", "translate(0," + height + ")")
//     .call(xAxis);

//   svg
//     .append("g")
//     .attr("class", "y axis")
//     .call(yAxis)
//     .append("text")
//     .attr("transform", "rotate(-90)")
//     .attr("y", 6)
//     .attr("dy", ".71em")
//     .style("text-anchor", "end")
//     .text("Score");

//   var cluster = svg
//     .selectAll(".cluster")
//     .data(data)
//     .enter()
//     .append("g")
//     .attr("class", "g")
//     .attr("transform", function (d) {
//       return "translate(" + x(d.cluster) + ",0)";
//     });

//   cluster
//     .selectAll("rect")
//     .data(function (d) {
//       var y0 = 0;
//       return color.domain().map(function (name) {
//         return { name: name, y0: y0, y1: (y0 += +d[name]), cluster: d.cluster };
//       });
//     })
//     .enter()
//     .append("rect")
//     .attr("width", x.rangeBand())
//     .attr("y", function (d) {
//       return y(d.y1);
//     })
//     .attr("height", function (d) {
//       return y(d.y0) - y(d.y1);
//     })
//     .style("fill", function (d) {
//       return color(d.name);
//     })
//     // Add text labels
//     .each(function (d) {
//       var bar = d3.select(this);
//       var barHeight = y(d.y0) - y(d.y1);
//       if (barHeight > 20) {
//         // Only add text if the bar is tall enough
//         var barWidth = x.rangeBand();
//         var barX = x(d.cluster) + barWidth / 2; // Center of the bar
//         var barY = y(d.y1) + (y(d.y0) - y(d.y1)) / 2; // Middle of the bar height

//         svg
//           .append("text")
//           .attr("x", barX)
//           .attr("y", barY)
//           .attr("dy", "0.35em")
//           .attr("text-anchor", "middle")
//           .text(d3.format(".2f")(d.y1 - d.y0))
//           .style("fill", "black") // Choose a fill color that contrasts with the bar
//           .style("font-size", "20px"); // Adjust font size as needed
//       }
//     });

//   // Calculate the legend item offsets by accumulating widths
//   var legendItemOffsets = [0];
//   color
//     .domain()
//     .slice()
//     .reverse()
//     .forEach(function (d, i) {
//       var textWidth = getTextWidth(d, "20px sans-serif"); // Calculate text width (you may need a helper function for this)
//       var spacing = 48; // Adjust spacing based on your styling
//       if (i > 0) {
//         legendItemOffsets.push(legendItemOffsets[i - 1] + textWidth + spacing);
//       }
//     });

//   // Create legend
//   var legend = svg
//     .selectAll(".legend")
//     .data(color.domain().slice().reverse())
//     .enter()
//     .append("g")
//     .attr("class", "legend")
//     .attr("transform", function (d, i) {
//       return (
//         "translate(" +
//         legendItemOffsets[i] +
//         "," +
//         (height + margin.bottom - 20) +
//         ")"
//       );
//     });

//   legend
//     .append("rect")
//     .attr("x", 0)
//     .attr("width", 18)
//     .attr("height", 18)
//     .style("fill", color);

//   legend
//     .append("text")
//     .attr("x", 22)
//     .attr("y", 9)
//     .attr("dy", ".35em")
//     .style("text-anchor", "start")
//     .text(function (d) {
//       return d;
//     });

//   // Helper function to measure text width
//   function getTextWidth(text, font) {
//     // re-use canvas object for better performance
//     var canvas =
//       getTextWidth.canvas ||
//       (getTextWidth.canvas = document.createElement("canvas"));
//     var context = canvas.getContext("2d");
//     context.font = font;
//     var metrics = context.measureText(text);
//     return metrics.width;
//   }
// }

/*
 * load T-SNE layout
 * @param threshold = threshold for cosine distance
 */
// function loadT_SNE(threshold) {
//   $("#general_view1").html(""); //clear the screen

//   linkedByIndex = new Array();

//   var margin = { top: 5, right: 5, bottom: 5, left: 5 },
//     width = $("#general_view1").width() - margin.left - margin.right,
//     height = $("#general_view1").height() - margin.top - margin.bottom;

//   var nominal_base_node_size = 8;
//   var focus_node = null,
//     highlight_node = null;
//   var highlight_color = "black";
//   var outline = false;
//   var default_link_color = "#a6a6a6";
//   var nominal_stroke = 0.5;
//   var max_stroke = 4.5;
//   var max_base_node_size = 36;
//   var min_zoom = 0.1;
//   var max_zoom = 8;
//   var zoom = d3.behavior.zoom().scaleExtent([min_zoom, max_zoom]);
//   var towhite = "stroke";
//   if (outline) {
//     tocolor = "stroke";
//     towhite = "fill";
//   }
//   var size = d3.scale.pow().exponent(1).domain([1, 100]).range([8, 24]);

//   // svg = d3.select("#general_view").append("svg")
//   //   .attr("class", "svg")
//   //   .attr("width", width)
//   //   .attr("height", height);

//   //in order to have enough space to show the graph (min width is 300)
//   // if($("#general_view").width() < 400) {
//   //   svg = d3.select("#general_view").append("svg")
//   //   .attr("class", "svg")
//   //   .attr("width", "400px")
//   //   .attr("height", "400px");

//   //   width = 400 - margin.left - margin.right;
//   //   height = 400 - margin.top - margin.bottom;

//   // }
//   // else
//   {
//     svg = d3
//       .select("#general_view1")
//       .append("svg")
//       .attr("class", "svg")
//       .attr("width", "100%")
//       .attr("height", "100%");
//   }

//   g = svg.append("g");

//   force = d3.layout
//     .force()
//     .size([width, height])
//     .gravity(0.3)
//     .distance(20)
//     .charge(-300)
//     .alpha(0)
//     .on("tick", tick);

//   var drag = force.drag().on("dragstart", dragstart);

//   node = force.nodes();
//   link - force.links();

//   (link = g.append("g").selectAll(".link")),
//     (node = g.append("g").selectAll(".node"));

//   // d3.json("data/json5.json", function(error, json) {
//   //  if (error) throw error;

//   //filter links by threshold
//   var linkData = generalViewGraph.links.filter(function (n) {
//     if (n.v <= threshold) {
//       return n;
//     }
//   });

//   linkData.forEach(function (d) {
//     linkedByIndex[d.source + "," + d.target] = true;
//   });

//   //update #documents and # links statistics
//   $("#span2").text(generalViewGraph.nodes.length);
//   $("#span4").text(linkData.length / 2);

//   force.nodes(generalViewGraph.nodes).links(linkData);
//   // .start();

//   link = link.data(linkData).enter().append("line").attr("class", "link");

//   node = node
//     .data(generalViewGraph.nodes)
//     .enter()
//     .append("circle")
//     .attr("class", "node")
//     .style("fill", function (d) {
//       return d.co;
//     })
//     .attr("r", r)
//     .on("dblclick", dblclick)
//     .call(drag)
//     .attr("data-hasqtip", function (d) {
//       $(this).qtip({
//         content: {
//           text:
//             '<strong>Document name:</strong><br><u class="hyperLink" onclick="showDocumentPDF($(this).text())">' +
//             d.na +
//             "</u><br><br><strong>List of clusters name:</strong><br>" +
//             createListOfDocumentClustersName(d.cl, d.na) +
//             "</u><br><strong>List of top 5 terms:</strong><br>" +
//             getListOfTermsOfDocument(d.na),
//         },
//         hide: {
//           fixed: true,
//           delay: 700,
//         },
//         show: {
//           delay: 700,
//         },
//         style: {
//           classes: "qtip-rounded qtip-shadow",
//         },
//         position: {
//           my: "center right",
//           at: "center left",
//         },
//       });
//     });

//   node
//     .on("mouseover", function (d) {
//       saveLog("tSneLayoutNodeMouseOver");
//       set_highlight(d);
//     })
//     .on("click", function (d) {
//       d3.event.stopPropagation();
//       focus_node = d;
//       set_focus(d);
//       set_highlight(d);
//       saveLog("tSneLayoutNodeClick");
//     })
//     .on("mousedown", function (d) {
//       d3.event.stopPropagation();
//     })
//     .on("mouseout", function (d) {
//       exit_highlight();
//     })
//     .on("contextmenu", function (d, i) {
//       saveLog("tSneLayoutNodeContextMenue");
//       d3.event.preventDefault();
//       // react on right-clicking
//     });

//   svg
//     .on("click", function () {
//       if (focus_node != null) {
//         focus_node = null;
//         if (highlight_trans < 1) {
//           node.style("opacity", 1);
//           link.style("opacity", 1);

//           node2.style("opacity", 1);
//           link2.style("opacity", 1);
//         }
//       } else {
//         node.style("opacity", 1);
//         link.style("opacity", 1);

//         node2.style("opacity", 1);
//         link2.style("opacity", 1);
//       }
//       if (highlight_node == null) exit_highlight();
//     })
//     .on("contextmenu", function (d, i) {
//       d3.event.preventDefault();
//       // react on right-clicking
//     });

//   // node.on("dblclick.zoom", function(d) { d3.event.stopPropagation();
//   //   var dcx = (window.innerWidth/2-d.x*zoom.scale());
//   //   var dcy = (window.innerHeight/2-d.y*zoom.scale());
//   //   zoom.translate([dcx,dcy]);
//   //   g.attr("transform", "translate("+ dcx + "," + dcy  + ")scale(" + zoom.scale() + ")");
//   // });

//   // });

//   node.classed("fixed", function (d) {
//     d.fixed = false;
//   });

//   force.start();
//   for (var i = 0; i < 2; i++) force.tick();

//   node.classed("fixed", function (d) {
//     d.fixed = true;
//   });

//   function tick() {
//     // node.attr("cx", function(d) { return d.x = Math.max(r, Math.min(width - r, d.x)); })
//     //     .attr("cy", function(d) { return d.y = Math.max(r, Math.min(height - r, d.y)); });

//     node
//       .attr("cx", function (d) {
//         return (d.x = d.x);
//       })
//       .attr("cy", function (d) {
//         return (d.y = d.y);
//       });

//     link
//       .attr("x1", function (d) {
//         return d.source.x;
//       })
//       .attr("y1", function (d) {
//         return d.source.y;
//       })
//       .attr("x2", function (d) {
//         return d.target.x;
//       })
//       .attr("y2", function (d) {
//         return d.target.y;
//       });
//   }

//   function dblclick(d) {
//     // d3.select(this).classed("fixed", d.fixed = false);
//   }

//   function dragstart(d) {
//     // d3.select(this).classed("fixed", d.fixed = true);
//   }

//   function isNumber(n) {
//     return !isNaN(parseFloat(n)) && isFinite(n);
//   }

//   function set_highlight(d) {
//     svg.style("cursor", "pointer");
//     svg2.style("cursor", "pointer");
//     if (focus_node != null) d = focus_node;
//     highlight_node = d;

//     if (highlight_color != "#a6a6a6") {
//       node.style(towhite, function (o) {
//         if (o.na == $(doc_select).val()) {
//           return "red";
//         }
//         // else if(docsHighlight[o.na])
//         // {
//         //   return "blue";
//         // }
//         else if (isConnected(d, o)) {
//           return highlight_color;
//         } else {
//           return "#a6a6a6";
//         }
//       });

//       link.style("stroke", function (o) {
//         return o.source.index == d.index || o.target.index == d.index
//           ? highlight_color
//           : isNumber(o.score) && o.score >= 0
//           ? color(o.score)
//           : default_link_color;
//       });

//       //set node stroke
//       node.style("stroke-width", function (o) {
//         if (
//           (docsHighlight[o.na] && isConnected(d, o)) ||
//           o.na == $(doc_select).val()
//         ) {
//           return "2px";
//         } else {
//           return "0.5px";
//         }
//       });

//       node2.style(towhite, function (o) {
//         if (o.na == $(doc_select).val()) {
//           return "red";
//         }
//         // else if(docsHighlight[o.na])
//         // {
//         //   return "blue";
//         // }
//         else if (isConnected(d, o)) {
//           return highlight_color;
//         } else {
//           return "#a6a6a6";
//         }
//       });

//       link2.style("stroke", function (o) {
//         return o.source.index == d.index || o.target.index == d.index
//           ? highlight_color
//           : isNumber(o.score) && o.score >= 0
//           ? color(o.score)
//           : default_link_color;
//       });

//       //set node stroke
//       node2.style("stroke-width", function (o) {
//         if (
//           (docsHighlight[o.na] && isConnected(d, o)) ||
//           o.na == $(doc_select).val()
//         ) {
//           return "2px";
//         } else {
//           return "0.5px";
//         }
//       });
//     }
//   }

//   function exit_highlight() {
//     highlight_node = null;
//     if (focus_node == null) {
//       svg.style("cursor", "move");
//       if (highlight_color != "#a6a6a6") {
//         node.style(towhite, function (o) {
//           if (o.na == $(doc_select).val()) {
//             return "red";
//           }
//           // else if(docsHighlight[o.na])
//           // {
//           //   return "blue";
//           // }
//           else {
//             return "#a6a6a6";
//           }
//         });
//         link.style("stroke", function (o) {
//           return isNumber(o.score) && o.score >= 0
//             ? color(o.score)
//             : default_link_color;
//         });

//         //set node stroke
//         node.style("stroke-width", function (o) {
//           if (o.na == $(doc_select).val()) {
//             return "2px";
//           } else {
//             return "0.5px";
//           }
//         });
//       }
//     }
//   }

//   zoom.on("zoom", function () {
//     var stroke = nominal_stroke;

//     if (nominal_stroke * zoom.scale() > max_stroke) {
//       stroke = max_stroke / zoom.scale();
//     }

//     link.style("stroke-width", stroke);
//     // node.style("stroke-width",stroke);

//     node.style("stroke-width", function (o) {
//       if (o.na == $(doc_select).val()) {
//         return stroke * 3;
//       } else {
//         return stroke;
//       }
//     });

//     var base_radius = nominal_base_node_size;

//     g.attr(
//       "transform",
//       "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")"
//     );
//   });

//   svg.call(zoom);
// } //*******************************End of T-SNE

// Calculate mean score for each feature across all clusters
// function calculateMeanScores(data) {
//   var meanScores = {};
//   for (var feature in data) {
//       var scores = data[feature];
//       var sum = scores.reduce(function(a, b) { return a + b; }, 0);
//       meanScores[feature] = sum / scores.length;
//   }
//   return meanScores;
// }
// // Calculate differential scores for each feature
// function calculateDifferentialScores(data, meanScores) {
//   var differentialScores = {};
//   for (var feature in data) {
//       differentialScores[feature] = data[feature].map(function(score) {
//           return score - meanScores[feature];
//       });
//   }
//   return differentialScores;
// }
// // Normalize the differential scores
// function normalizeScores(differentialScores) {
//   var allDifferentials = [].concat.apply([], Object.values(differentialScores));
//   var minDiff = Math.min.apply(Math, allDifferentials);
//   var maxDiff = Math.max.apply(Math, allDifferentials.map(function(d) { return d - minDiff; }));

//   var normalizedScores = {};
//   for (var feature in differentialScores) {
//       normalizedScores[feature] = differentialScores[feature].map(function(d) {
//           return (d - minDiff) / maxDiff;
//       });
//   }
//   return normalizedScores;
// }

// // Step 1: Calculate Feature Averages Across Clusters
// function calculateFeatureAverages(rawScores) {
//   let featureAverages = {};
//   for (let feature in rawScores) {
//     let total = rawScores[feature].reduce((acc, score) => acc + score, 0);
//     featureAverages[feature] = total / rawScores[feature].length;
//   }
//   return featureAverages;
// }
// // Step 2: Compute Relative Differences
// function computeRelativeDifferences(rawScores, featureAverages) {
//   let relativeDifferences = {};
//   for (let feature in rawScores) {
//     relativeDifferences[feature] = rawScores[feature].map(score => score - featureAverages[feature]);
//   }
//   return relativeDifferences;
// }
// // Step 3: Scale Up the Relative Differences
// function scaleUpDifferences(relativeDifferences, scalingFactor) {
//   let scaledDifferences = {};
//   for (let feature in relativeDifferences) {
//     scaledDifferences[feature] = relativeDifferences[feature].map(difference => difference * scalingFactor);
//   }
//   return scaledDifferences;
// }
// Step 4: Separate Positive and Negative Contributions
// function separatePositiveNegativeValues(scaledDifferences) {
//   let positiveValues = {};
//   let negativeValues = {};
//   for (let feature in scaledDifferences) {
//     positiveValues[feature] = scaledDifferences[feature].map(value => Math.max(0, value));
//     negativeValues[feature] = scaledDifferences[feature].map(value => Math.min(0, value));
//   }
//   return { positiveValues, negativeValues };
// }


// success: function (msg) {
//   let concept_support = msg["concept_support"];
//   let docElement = document.getElementById("doc_content");

//   // Sort entities by start index to avoid conflicts during replacements
//   let entities = Object.keys(concept_support).sort((a, b) => {
//       return concept_support[a]["largestRangeFrom"] - concept_support[b]["largestRangeFrom"];
//   });

//   // Convert HTML string into a DOM Node
//   let parser = new DOMParser();
//   let docContent = parser.parseFromString(docElement.innerHTML, "text/html").body;

//   // Offset to keep track of modifications
//   let offset = 0;

//   entities.forEach(entity => {
//       let currentColor = color(entity);
//       let start = concept_support[entity]["largestRangeFrom"] + offset;
//       let end = concept_support[entity]["largestRangeTo"] + offset;
//       let range = document.createRange();
      
//       try {
//           // Set the start and end positions of the range
//           range.setStart(docContent.firstChild, start);
//           range.setEnd(docContent.firstChild, end);
          
//           // Create a new span element for highlighting
//           let newNode = document.createElement("span");
//           newNode.style.backgroundColor = currentColor;
//           newNode.style.color = "white";
//           newNode.style.fontWeight = "bold";
//           newNode.appendChild(range.extractContents());  // Move the selected text into the span
          
//           // Insert the new span element into the content
//           range.insertNode(newNode);

//           // Adjust the offset by adding the length of the new HTML markup
//           offset += newNode.outerHTML.length - (end - start);
//       } catch(e) {
//           console.error("Error setting range for highlighting:", e);
//       }
//   });

//   // Update the innerHTML of the original document element
//   docElement.innerHTML = docContent.firstChild.innerHTML;
// },


/*
 * Change Cosine distance of general view graph
 * @param value = value
 */
// function graphCosineDistanceChange(value) {
//   $("#forceSilhouette_label").html("");

//   saveLog("graphCosineDistanceChange");

//   if (userID != "") {
//     value = value / 100;

//     //exit highligted node
//     node.style("stroke", function (o) {
//       if (o.na == $(doc_select).val()) {
//         return "red";
//       }
//       // else if(docsHighlight[o.na])
//       // {
//       //   return "blue";
//       // }
//       else {
//         return "#a6a6a6";
//       }
//     });
//     node.style("opacity", 1);
//     link.style("opacity", 1);
//     link.style("stroke", "#a6a6a6");

//     node2.style("stroke", function (o) {
//       if (o.na == $(doc_select).val()) {
//         return "red";
//       }
//       // else if(docsHighlight[o.na])
//       // {
//       //   return "blue";
//       // }
//       else {
//         return "#a6a6a6";
//       }
//     });
//     node2.style("opacity", 1);
//     link2.style("opacity", 1);
//     link2.style("stroke", "#a6a6a6");

//     var newLinks = generalViewGraph.links.filter(function (n) {
//       if (n.v <= value) {
//         return n;
//       }
//     });

//     var newLinks2 = generalViewGraph2.links.filter(function (n) {
//       if (n.v <= value) {
//         return n;
//       }
//     });

//     //for links
//     force.links(newLinks).resume();
//     link = link.data(newLinks);
//     link.exit().remove();
//     link.enter().append("line").attr("class", "link");
//     force.start();

//     force2.links(newLinks2).resume();
//     link2 = link2.data(newLinks2);
//     link2.exit().remove();
//     link2.enter().append("line").attr("class", "link");
//     force2.start();

//     linkedByIndex = new Array();
//     newLinks.forEach(function (d) {
//       linkedByIndex[d.source.index + "," + d.target.index] = true;
//     });

//     linkedByIndex2 = new Array();
//     newLinks2.forEach(function (d) {
//       linkedByIndex2[d.source.index + "," + d.target.index] = true;
//     });

//     //update # links statistics
//     $("#span4").text(newLinks.length / 2);
//   }
// }
/*
 * Change link distance of general view graph
 * @param value = value
 */
// function graphLinkDistanceChange(value) {
//   saveLog("graphLinkDistanceChange");
//   $("#forceSilhouette_label").html("");

//   if (userID != "") {
//     linkDistance = value;
//     force2.linkDistance(linkDistance);
//     force2.start();
//   }
// }
/*
 * Change Gravity of general view graph
 * @param value = value
 */
// function graphGravityChange(value) {
//   saveLog("graphGravityChange");
//   $("#forceSilhouette_label").html("");

//   if (userID != "") {
//     gravity = value / 100;
//     force2.gravity(gravity);

//     force2.start();
//   }
// }
/*
/**
 * Show the term cload of the document
 * @param documentName = docuemnt name
 */
// function showDocumentCloud(documentName) {
//   saveLog("showDocumentCloud");

//   if ($("#doc_content").text().length <= 1) {
//     return null;
//   }

//   //get sorted list of top terms of the document
//   var terms = getDocumentTermsSorted(documentName);

//   //get top 30 terms
//   var wordsTemp = "";
//   for (var i = 0; i < terms.length; i++) {
//     if (i == 0) {
//       wordsTemp += terms[i][0] + "|" + Math.floor(terms[i][1] * 15);
//     } else {
//       wordsTemp += "|" + terms[i][0] + "|" + Math.floor(terms[i][1] * 15);
//     }

//     if (i >= 29) {
//       break;
//     }
//   }

//   //clear the cloud
//   $("#panel8_2").html("");

//   if (wordsTemp != "") {
//     var words = wordsTemp.split("|");
//     var x = document.getElementById("cloudColor");
//     var title = "Term Cloud (Selected Document)";
//     wordCloud(
//       wordText(words),
//       sizeOfText(words),
//       "panel8_2",
//       "panel8",
//       title
//     );
//   }
// }
/*
 * load general view
 * @parm threshold = threshold for cosine distance
 */
// function generalViewLoader(threshold) {
//   //load T-SNE layout
//   // loadT_SNE(threshold);
//   //load Force layout
//   // load_Force(threshold);
// }

/*
 * load force layout
 * @parm threshold = threshold for cosine distance
 */
// function load_Force(threshold) {
//   $("#general_view2").html(""); //clear the screen
//   linkedByIndex2 = new Array();

//   var margin = { top: 5, right: 5, bottom: 5, left: 5 },
//     width = $("#general_view1").width() - margin.left - margin.right,
//     height = $("#general_view1").height() - margin.top - margin.bottom;

//   var nominal_base_node_size = 8;
//   var focus_node = null,
//     highlight_node = null;
//   var highlight_color = "black";
//   var outline = false;
//   var default_link_color = "#a6a6a6";
//   var nominal_stroke = 0.5;
//   var max_stroke = 4.5;
//   var max_base_node_size = 36;
//   var min_zoom = 0.1;
//   var max_zoom = 8;
//   var zoom = d3.behavior.zoom().scaleExtent([min_zoom, max_zoom]);
//   var towhite = "stroke";
//   if (outline) {
//     tocolor = "stroke";
//     towhite = "fill";
//   }
//   var size = d3.scale.pow().exponent(1).domain([1, 100]).range([8, 24]);

//   svg2 = d3
//     .select("#general_view2")
//     .append("svg")
//     .attr("class", "svg")
//     .attr("width", "100%")
//     .attr("height", "100%");

//   g2 = svg2.append("g");

//   force2 = d3.layout
//     .force()
//     .size([width, height])
//     .gravity(gravity)
//     .distance(linkDistance)
//     .charge(-50)
//     .on("tick", tick);

//   var drag = force2.drag().on("dragstart", dragstart);

//   node2 = force2.nodes();
//   link2 = force2.links();

//   (link2 = g2.append("g").selectAll(".link2")),
//     (node2 = g2.append("g").selectAll(".node2"));

//   // d3.json("data/json5.json", function(error, json) {
//   //  if (error) throw error;

//   //filter links by threshold
//   var linkData = generalViewGraph2.links.filter(function (n) {
//     if (n.v <= threshold) {
//       return n;
//     }
//   });

//   linkData.forEach(function (d) {
//     linkedByIndex2[d.source + "," + d.target] = true;
//   });

//   //update #documents and # links statistics
//   $("#span2").text(generalViewGraph2.nodes.length);
//   $("#span4").text(linkData.length / 2);

//   force2.nodes(generalViewGraph2.nodes).links(linkData).start();

//   link2 = link2.data(linkData).enter().append("line").attr("class", "link2");

//   node2 = node2
//     .data(generalViewGraph2.nodes)
//     .enter()
//     .append("circle")
//     .attr("class", "node2")
//     .style("fill", function (d) {
//       return d.co;
//     })
//     .attr("r", r)
//     .on("dblclick", dblclick)
//     .call(drag)
//     .attr("data-hasqtip", function (d) {
//       $(this).qtip({
//         content: {
//           text:
//             '<strong>Document name:</strong><br><u class="hyperLink" onclick="showDocumentPDF($(this).text())">' +
//             d.na +
//             "</u><br><br><strong>List of clusters name:</strong><br>" +
//             createListOfDocumentClustersName(d.cl, d.na) +
//             "</u><br><strong>List of top 5 terms:</strong><br>" +
//             getListOfTermsOfDocument(d.na),
//         },
//         hide: {
//           fixed: true,
//           delay: 700,
//         },
//         show: {
//           delay: 1500,
//         },
//         style: {
//           classes: "qtip-rounded qtip-shadow",
//         },
//         position: {
//           my: "center right",
//           at: "center left",
//         },
//       });
//     });

//   node2
//     // .on("mouseover", function (d) {
//     //   saveLog("forceLayoutNodeMouseOver");
//     //   force2.stop();
//     //   set_highlight(d);
//     // })
//     .on("click", function (d) {
//       force2.stop();
//       d3.event.stopPropagation();
//       focus_node = d;
//       set_focus(d);
//       set_highlight(d);
//       saveLog("forceLayoutNodeClick");
//     })
//     .on("mousedown", function (d) {
//       force2.stop();
//       d3.event.stopPropagation();
//     })
//     .on("mouseout", function (d) {
//       force2.stop();
//       exit_highlight();
//     })
//     .on("contextmenu", function (d, i) {
//       saveLog("forceLayoutNodeShowCloud");
//       force2.stop();
//       d3.event.preventDefault();
//       // react on right-clicking
//     });

//   svg2
//     .on("click", function () {
//       force2.stop();
//       if (focus_node != null) {
//         focus_node = null;
//         if (highlight_trans < 1) {
//           node2.style("opacity", 1);
//           link2.style("opacity", 1);

//           node.style("opacity", 1);
//           link.style("opacity", 1);
//         }
//       } else {
//         node2.style("opacity", 1);
//         link2.style("opacity", 1);

//         node.style("opacity", 1);
//         link.style("opacity", 1);
//       }
//       if (highlight_node == null) exit_highlight();
//     })
//     .on("contextmenu", function (d, i) {
//       d3.event.preventDefault();
//       // react on right-clicking
//     });

//   // node.on("dblclick.zoom", function(d) { d3.event.stopPropagation();
//   //   var dcx = (window.innerWidth/2-d.x*zoom.scale());
//   //   var dcy = (window.innerHeight/2-d.y*zoom.scale());
//   //   zoom.translate([dcx,dcy]);
//   //   g.attr("transform", "translate("+ dcx + "," + dcy  + ")scale(" + zoom.scale() + ")");
//   // });

//   // });

//   function tick() {
//     link2
//       .attr("x1", function (d) {
//         return d.source.x;
//       })
//       .attr("y1", function (d) {
//         return d.source.y;
//       })
//       .attr("x2", function (d) {
//         return d.target.x;
//       })
//       .attr("y2", function (d) {
//         return d.target.y;
//       });

//     node2
//       .attr("cx", function (d) {
//         return d.x;
//       })
//       .attr("cy", function (d) {
//         return d.y;
//       });
//   }

//   function dblclick(d) {
//     d3.select(this).classed("fixed", (d.fixed = false));
//   }

//   function dragstart(d) {
//     d3.select(this).classed("fixed", (d.fixed = true));
//   }

//   function isConnected(a, b) {
//     return (
//       linkedByIndex2[a.index + "," + b.index] ||
//       linkedByIndex2[b.index + "," + a.index] ||
//       a.index == b.index
//     );
//   }

//   function isNumber(n) {
//     return !isNaN(parseFloat(n)) && isFinite(n);
//   }

//   function set_highlight(d) {
//     svg2.style("cursor", "pointer");
//     svg.style("cursor", "pointer");
//     if (focus_node != null) d = focus_node;
//     highlight_node = d;

//     if (highlight_color != "#a6a6a6") {
//       node2.style(towhite, function (o) {
//         if (o.na == $(doc_select).val()) {
//           return "red";
//         }
//         // else if(docsHighlight[o.na])
//         // {
//         //   return "blue";
//         // }
//         else if (isConnected(d, o)) {
//           return highlight_color;
//         } else {
//           return "#a6a6a6";
//         }
//       });

//       link2.style("stroke", function (o) {
//         return o.source.index == d.index || o.target.index == d.index
//           ? highlight_color
//           : isNumber(o.score) && o.score >= 0
//           ? color(o.score)
//           : default_link_color;
//       });

//       //set node stroke
//       node2.style("stroke-width", function (o) {
//         if (
//           (docsHighlight[o.na] && isConnected(d, o)) ||
//           o.na == $(doc_select).val()
//         ) {
//           return "2px";
//         } else {
//           return "0.5px";
//         }
//       });

//       node.style(towhite, function (o) {
//         if (o.na == $(doc_select).val()) {
//           return "red";
//         }
//         // else if(docsHighlight[o.na])
//         // {
//         //   return "blue";
//         // }
//         else if (isConnected(d, o)) {
//           return highlight_color;
//         } else {
//           return "#a6a6a6";
//         }
//       });

//       link.style("stroke", function (o) {
//         return o.source.index == d.index || o.target.index == d.index
//           ? highlight_color
//           : isNumber(o.score) && o.score >= 0
//           ? color(o.score)
//           : default_link_color;
//       });

//       //set node stroke
//       node.style("stroke-width", function (o) {
//         if (
//           (docsHighlight[o.na] && isConnected(d, o)) ||
//           o.na == $(doc_select).val()
//         ) {
//           return "2px";
//         } else {
//           return "0.5px";
//         }
//       });
//     }
//   }

//   function exit_highlight() {
//     highlight_node = null;
//     if (focus_node == null) {
//       svg2.style("cursor", "move");
//       if (highlight_color != "#a6a6a6") {
//         node2.style(towhite, function (o) {
//           if (o.na == $(doc_select).val()) {
//             return "red";
//           }
//           // else if(docsHighlight[o.na])
//           // {
//           //   return "blue";
//           // }
//           else {
//             return "#a6a6a6";
//           }
//         });
//         link2.style("stroke", function (o) {
//           return isNumber(o.score) && o.score >= 0
//             ? color(o.score)
//             : default_link_color;
//         });

//         //set node stroke
//         node2.style("stroke-width", function (o) {
//           if (o.na == $(doc_select).val()) {
//             return "2px";
//           } else {
//             return "0.5px";
//           }
//         });
//       }
//     }
//   }

//   zoom.on("zoom", function () {
//     var stroke = nominal_stroke;

//     if (nominal_stroke * zoom.scale() > max_stroke) {
//       stroke = max_stroke / zoom.scale();
//     }

//     link2.style("stroke-width", stroke);
//     // node.style("stroke-width",stroke);

//     node2.style("stroke-width", function (o) {
//       if (o.na == $(doc_select).val()) {
//         return stroke * 3;
//       } else {
//         return stroke;
//       }
//     });

//     var base_radius = nominal_base_node_size;

//     g2.attr(
//       "transform",
//       "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")"
//     );
//   });

//   svg2.call(zoom);
// } //************************* End of force layout load

// {/* <script>
        // document.getElementById("doc_select").onchange = function () { */}
        //   document.getElementById("doc_content").innerHTML = "vuyvuyvkuvuv";
        //   loadDoc(this.value);
        // createTermClusterChart(this.value);

        //   //show the paralel cordinator view
        //   var words = new Array(1);
        //   var colors = {};
        //   words[0] = this.value;
        //   colors[words[0]] = $("#" + getSelectedClusterID() + " p").css(
        //     "background-color"
        //   ); //"Blue";
        //   paralelCordinator(
        //     documentClusterData,
        //     "#panel6",
        //     words,
        //     "#DocumentClusterView",
        //     colors
        //   );

        //   //highlight the document in general view
        //   // highlightDocGeneralView(this.value);
        //   createTermClusterChart();

        //   //change the color of selected doc to red
        //   $(this).css("color", "red");
        //   var options = this.children;
        //   for (var i = 0; i < this.childElementCount; i++) {
        //     if (options[i].value == this.value) options[i].style.color = "red";
        //     else options[i].style.color = "black";
        //   }
        // };
    //   </script>

//     <select id="doc_select">
//     <!-- list of documnets are here! -->
//   </select>
// <!-- <input
// id="button15"
// title="ShowPDF"
// class="button"
// type="button"
// value="ShowPDF"
// onclick="showDocumentPDF(document.getElementById('doc_select').value)"
// />
// <input
// id="button16"
// title="ShowCloud"
// class="button"
// type="button"
// value="ShowCloud"
// onclick="showDocumentCloud(document.getElementById('doc_select').value)"
// /> -->

// <!-- <input
// id="button2"
// title="Upload Document"
// class="button"
// type="button"
// value="Upload Document"
// onclick="openUploadPage()"
// /> -->
// <!-- <input
// id="button3"
// title="Save Session"
// class="button"
// type="button"
// value="Save Session"
// onclick="saveSession()"
// />
// <input
// id="button14"
// title="Delete Session"
// class="button"
// type="button"
// value="Delete Session"
// onclick="deleteSession()"
// /> -->
// <!-- <input
// id="button18"
// title="Add Note"
// class="button"
// type="button"
// value="Note"
// /> -->
// <!-- <select id="session_select"> -->
// <!-- list of sessions are here! -->
// <!-- <option value="first" disabled selected>Select Session</option>
// </select>
// <input type="checkbox" id="auto_save_session" /><span
// id="auto_save_session_text"
// >Auto save session</span -->
// <!-- ><br /> -->
// <!-- <input
// id="button4"
// title="Cluster"
// class="button"
// type="button"
// value="Cluster"
// onclick="SendData2Server()"
// />

// <span id="slider0_label">Confidence (%):</span>
// <input id="slider0_Textbox" type="text" onkeyup="changeSlider0()" />
// <span id="slider0_min">0</span>
// <span id="slider0_max">100</span>
// <div id="slider0"></div>

// <span id="Clustering_algo_text_main">Clustering <br />Method:</span>
// <select id="Clustering_algo_select_main">
// <option value="LDC">LDC</option>
// <option value="iK-means">iK-means</option>
// </select>
// <script>
// document.getElementById("Clustering_algo_select_main").onchange =
//   function () {
//     clusteringMethod = $("#Clustering_algo_select_main").val();
//     if (clusteringMethod == "LDC") {
//       $("#slider0").slider("disable");
//       $("#slider0_Textbox").attr("disabled", "disabled");
//     } else if (clusteringMethod == "iK-means") {
//       $("#slider0").slider("enable");
//       $("#slider0_Textbox").removeAttr("disabled");
//     }
//   };
// </script> -->

// <!-- <input
// id="textbox1"
// title=""
// placeholder="Search"
// onclick="selectText()"
// class="textbox"
// autocomplete="on"
// type="text"
// width="800px"
// />
// <script>
// document.getElementById("session_select").onchange = function () {
//   $("body").css("cursor", "wait");

//   var ok = confirm(
//     "Do you want to load this session? Please save your work before."
//   );

//   if (!ok) {
//     $("#session_select option[value='first']").attr("selected", true);
//     $("body").css("cursor", "auto");
//     return null;
//   }

//   var sessionName = this.value;

//   loadSession(sessionName);
// };
// </script> -->

// function openFeedbackPopup() {
//   var popup = window.open('', 'Feedback Form', 'width=600,height=400');

//   popup.document.write('<html><head><title>Feedback Form</title></head><body>');
//   popup.document.write('<h1>Provide Your Feedback</h1>');
//   popup.document.write('<p>1) Does the explanation logically support the article\'s categorization?</p>');
//   popup.document.write('<input type="radio" id="yes" name="support" value="Yes"><label for="yes">Yes</label><br>');
//   popup.document.write('<input type="radio" id="no" name="support" value="No" ><label for="no">No</label><br>');

//   popup.document.write('<div id="additionalQuestions" style="display:block;">'); // Wrap additional questions
//   //add a text area for the user to provide feedback if they answered no to the first question
//   popup.document.write('<textarea id="feedbackText" rows="4" cols="50" placeholder="Please provide feedback here"></textarea>');
//   popup.document.write('<p>2) Are you satisfied with the depth and detail of the explanation?</p>');
//   popup.document.write('<form>');
//   // Add radio buttons for scale 1 to 5
//   for (var i = 1; i <= 5; i++) {
//       popup.document.write('<input type="radio" id="scale' + i + '" name="depth" value="' + i + '">');
//       popup.document.write('<label for="scale' + i + '">' + i + '</label><br>');
//   }
//   popup.document.write('</form>');
//   popup.document.write('<button onclick="window.opener.submitFeedback()">Submit Feedback</button>'); // Moved the button inside the div
//   popup.document.write('</div>'); // Close the additionalQuestions div

//   popup.document.write('<script>');
//   popup.document.write('document.getElementById("no").addEventListener("change", function() { document.getElementById("additionalQuestions").style.display = "block"; });');
//   popup.document.write('document.getElementById("yes");');
// popup.document.write('function submitAndClose() {');
// popup.document.write('  window.opener.submitFeedback();'); // Call the function in the parent window to handle the feedback submission
// popup.document.write('  window.close();'); // Close the popup window
// popup.document.write('}');
// popup.document.write('document.getElementById("no").addEventListener("change", function() { document.getElementById("additionalQuestions").style.display = "block"; });');
// popup.document.write('document.getElementById("yes").addEventListener("change", function() { document.getElementById("additionalQuestions").style.display = "none"; });');
// popup.document.write('</script>');

//   popup.document.write('</body></html>');
//   popup.document.close();
// }

// function submitFeedback(feedbackText) {
//   // Use AJAX to send feedback to the server
//   console.log("Feedback text: " + feedbackText);
//   // Implement AJAX request to send feedbackText to your server
// }